!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("requestInterval",[],t):"object"==typeof exports?exports.requestInterval=t():e.requestInterval=t()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var r={};return t.m=e,t.c=r,t.i=function(e){return e},t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){var r=Date.now(),n=void 0,o=function o(){n=requestAnimationFrame(o),Date.now()-r>=t&&(e(),r=Date.now())};return n=requestAnimationFrame(o)},o=function(e){return cancelAnimationFrame(e)};t.requestInterval=n,t.clearRequestInterval=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clearRequestInterval=t.requestInterval=void 0;var n=r(0);t.requestInterval=n.requestInterval,t.clearRequestInterval=n.clearRequestInterval}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,